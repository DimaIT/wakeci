desc: Ask a cow to say something smart
# 'params' are injected as environmetal variables
# Note: The very first 'param' is visible on the Feed page
params:
  - SLEEP: 5

tasks:
  - name: Waking up a cow
    run: sleep ${SLEEP}

  - name: Cow says
    run: fortune | cowsay
    # command in `run` is executed when the condition in `when` evaluates to `true`
    # The condition uses `[[` syntax from bash (https://devhints.io/bash#conditionals)
    when: $USER == joe
    # command in `run` is executed when the command in `if` has exit code 0
    if: test -f API.md
    env:
      DRY: false
      HTTPS: true
    # Set task status to `finished` even if exit code is not 0
    ignore_errors: yes

  # `include` adds tasks from external file. The value can be an absolute path or
  # a path relative to WAKE_CONFIG_DIR.
  # If `when`, `if` or `env` is specified, all included tasks inherit it
  - include: includes/notifications.yml
    env:
      DRY: false

  # `block` statement allows to group multiple tasks together
  # If `when`, `if` or `env` is specified, all tasks inside `block` statement inherit it
  - name: Install application
    block:
      - name: Install application with dnf
        run: dnf install wget

      - name: Print all installed packages
        run: dnf List
    env:
      DRY: false

  # Using secrets. Secrets allow you to store sensitive information in your wake
  # configuration files. Use `secretsfile` configuration option for wakeci to
  # specify the path to the file with secrets.
  #
  # In a job file, secrets are accessed using the `secrets` object. The `secrets`
  # object is a map of secret names to their values. Secrets can be accessed in
  # the `env` section, `params` section and `run` section. Wakeci will automatically
  # redact secrets from the build logs.
  - name: Example of using secrets
    run: echo "My secret is {{ secrets.MY_SECRET }} and my API key is {{ secrets.API_KEY }}"
    env:
      API_KEY: "{{ secrets.API_KEY }}"

# List of patterns according to https://golang.org/pkg/path/filepath/#Match
# related to the workspace directory
# Note:
#  - artifacts are collected only for builds with status `finished` or `failed`
#  - `on_finished`, `on_failed` tasks are executed before artifacts are collected
#  - `finally` tasks are executed after artifacts are collected
artifacts:
  - "*.tar.gz"

# Automatically run the job every configured interval (cron expression)
# More info https://godoc.org/github.com/robfig/cron
interval: "@daily"

# Abort the job if it takes more than specified amount of time to finish
# Valid time units are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
timeout: 5m30s

# Adjust build position in the queue
priority: 10

# Designates how many builds of the same job can be executed in parallel
# 0 - unlimited
concurrency: 0

# List of tasks executed on build's status change
# Available handlers:
#  - `on_pending` - when the status of the build changes to `pending`
#  - `on_running` - when the status of the build changes to `running`
#  - `on_aborted` - when the status of the build changes to `aborted` or `timed out`
#  - `on_failed` - when the status of the build changes to `failed`
#  - `on_finished` - when the status of the build changes to `finished`
# Note: If one of the commands failed, it doesn't fail the whole build
on_pending:
  - name: Log a call
    run: logger "Looking for a suitable cow"

# List of tasks that are always executed
finally:
  - name: List all files
    run: ls -alh
# Default environmetal variables, inject by wake:
# "WAKE_BUILD_ID" - current build id, e.g. 169
# "WAKE_BUILD_WORKSPACE" - path to the build's workspace, e.g. ~/workspace/169/
# "WAKE_JOB_NAME" - name of the job, e.g. ask_a_cow
# "WAKE_JOB_PARAMS" - URL encoded `params` of the job. Useful to start another
#                     job with the same params, e.g. "sleep=5&print=true"
# "WAKE_CONFIG_DIR" - path to the directory with all job configuration files,
#                     e.g. ~/jobs/
# "WAKE_URL" - URL of the service, e.g. https://myci.space/

# To modify or introduce new environmental variables during the build execution,
# create `build.env` file in WAKE_BUILD_WORKSPACE directory.
#
# Example:
# echo "{environment_variable_name}={value}" >> build.env
#
# There are multiple ways of defining environment for running tasks. If the same
# environmental variable is defined multiple times, the priority is:
#  - default OS env variables
#  - wake env variables `WAKE_*`
#  - variables from `params` section
#  - variables from `env` section
#  - variables from `build.env` file
